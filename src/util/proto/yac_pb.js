/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.iroha.consensus.yac.proto.Commit', null, global);
goog.exportSymbol('proto.iroha.consensus.yac.proto.Hash', null, global);
goog.exportSymbol('proto.iroha.consensus.yac.proto.Reject', null, global);
goog.exportSymbol('proto.iroha.consensus.yac.proto.Signature', null, global);
goog.exportSymbol('proto.iroha.consensus.yac.proto.Vote', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iroha.consensus.yac.proto.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iroha.consensus.yac.proto.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iroha.consensus.yac.proto.Signature.displayName = 'proto.iroha.consensus.yac.proto.Signature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.iroha.consensus.yac.proto.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iroha.consensus.yac.proto.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iroha.consensus.yac.proto.Signature}
 */
proto.iroha.consensus.yac.proto.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iroha.consensus.yac.proto.Signature;
  return proto.iroha.consensus.yac.proto.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iroha.consensus.yac.proto.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iroha.consensus.yac.proto.Signature}
 */
proto.iroha.consensus.yac.proto.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iroha.consensus.yac.proto.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iroha.consensus.yac.proto.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.iroha.consensus.yac.proto.Signature.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.iroha.consensus.yac.proto.Signature.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iroha.consensus.yac.proto.Hash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iroha.consensus.yac.proto.Hash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iroha.consensus.yac.proto.Hash.displayName = 'proto.iroha.consensus.yac.proto.Hash';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.toObject = function(opt_includeInstance) {
  return proto.iroha.consensus.yac.proto.Hash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iroha.consensus.yac.proto.Hash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Hash.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: msg.getProposal_asB64(),
    block: msg.getBlock_asB64(),
    blockSignature: (f = msg.getBlockSignature()) && proto.iroha.consensus.yac.proto.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iroha.consensus.yac.proto.Hash}
 */
proto.iroha.consensus.yac.proto.Hash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iroha.consensus.yac.proto.Hash;
  return proto.iroha.consensus.yac.proto.Hash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iroha.consensus.yac.proto.Hash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iroha.consensus.yac.proto.Hash}
 */
proto.iroha.consensus.yac.proto.Hash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlock(value);
      break;
    case 3:
      var value = new proto.iroha.consensus.yac.proto.Signature;
      reader.readMessage(value,proto.iroha.consensus.yac.proto.Signature.deserializeBinaryFromReader);
      msg.setBlockSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iroha.consensus.yac.proto.Hash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iroha.consensus.yac.proto.Hash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Hash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlock_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBlockSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.iroha.consensus.yac.proto.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes proposal = 1;
 * @return {!(string|Uint8Array)}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.getProposal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes proposal = 1;
 * This is a type-conversion wrapper around `getProposal()`
 * @return {string}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.getProposal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposal()));
};


/**
 * optional bytes proposal = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposal()`
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.getProposal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposal()));
};


/** @param {!(string|Uint8Array)} value */
proto.iroha.consensus.yac.proto.Hash.prototype.setProposal = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes block = 2;
 * @return {!(string|Uint8Array)}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.getBlock = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block = 2;
 * This is a type-conversion wrapper around `getBlock()`
 * @return {string}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.getBlock_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlock()));
};


/**
 * optional bytes block = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlock()`
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.getBlock_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlock()));
};


/** @param {!(string|Uint8Array)} value */
proto.iroha.consensus.yac.proto.Hash.prototype.setBlock = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Signature block_signature = 3;
 * @return {?proto.iroha.consensus.yac.proto.Signature}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.getBlockSignature = function() {
  return /** @type{?proto.iroha.consensus.yac.proto.Signature} */ (
    jspb.Message.getWrapperField(this, proto.iroha.consensus.yac.proto.Signature, 3));
};


/** @param {?proto.iroha.consensus.yac.proto.Signature|undefined} value */
proto.iroha.consensus.yac.proto.Hash.prototype.setBlockSignature = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.iroha.consensus.yac.proto.Hash.prototype.clearBlockSignature = function() {
  this.setBlockSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iroha.consensus.yac.proto.Hash.prototype.hasBlockSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iroha.consensus.yac.proto.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iroha.consensus.yac.proto.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iroha.consensus.yac.proto.Vote.displayName = 'proto.iroha.consensus.yac.proto.Vote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iroha.consensus.yac.proto.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.iroha.consensus.yac.proto.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iroha.consensus.yac.proto.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: (f = msg.getHash()) && proto.iroha.consensus.yac.proto.Hash.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.iroha.consensus.yac.proto.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iroha.consensus.yac.proto.Vote}
 */
proto.iroha.consensus.yac.proto.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iroha.consensus.yac.proto.Vote;
  return proto.iroha.consensus.yac.proto.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iroha.consensus.yac.proto.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iroha.consensus.yac.proto.Vote}
 */
proto.iroha.consensus.yac.proto.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iroha.consensus.yac.proto.Hash;
      reader.readMessage(value,proto.iroha.consensus.yac.proto.Hash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.iroha.consensus.yac.proto.Signature;
      reader.readMessage(value,proto.iroha.consensus.yac.proto.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iroha.consensus.yac.proto.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iroha.consensus.yac.proto.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iroha.consensus.yac.proto.Hash.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.iroha.consensus.yac.proto.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional Hash hash = 1;
 * @return {?proto.iroha.consensus.yac.proto.Hash}
 */
proto.iroha.consensus.yac.proto.Vote.prototype.getHash = function() {
  return /** @type{?proto.iroha.consensus.yac.proto.Hash} */ (
    jspb.Message.getWrapperField(this, proto.iroha.consensus.yac.proto.Hash, 1));
};


/** @param {?proto.iroha.consensus.yac.proto.Hash|undefined} value */
proto.iroha.consensus.yac.proto.Vote.prototype.setHash = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iroha.consensus.yac.proto.Vote.prototype.clearHash = function() {
  this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iroha.consensus.yac.proto.Vote.prototype.hasHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Signature signature = 2;
 * @return {?proto.iroha.consensus.yac.proto.Signature}
 */
proto.iroha.consensus.yac.proto.Vote.prototype.getSignature = function() {
  return /** @type{?proto.iroha.consensus.yac.proto.Signature} */ (
    jspb.Message.getWrapperField(this, proto.iroha.consensus.yac.proto.Signature, 2));
};


/** @param {?proto.iroha.consensus.yac.proto.Signature|undefined} value */
proto.iroha.consensus.yac.proto.Vote.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.iroha.consensus.yac.proto.Vote.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iroha.consensus.yac.proto.Vote.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iroha.consensus.yac.proto.Commit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iroha.consensus.yac.proto.Commit.repeatedFields_, null);
};
goog.inherits(proto.iroha.consensus.yac.proto.Commit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iroha.consensus.yac.proto.Commit.displayName = 'proto.iroha.consensus.yac.proto.Commit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iroha.consensus.yac.proto.Commit.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iroha.consensus.yac.proto.Commit.prototype.toObject = function(opt_includeInstance) {
  return proto.iroha.consensus.yac.proto.Commit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iroha.consensus.yac.proto.Commit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Commit.toObject = function(includeInstance, msg) {
  var f, obj = {
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.iroha.consensus.yac.proto.Vote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iroha.consensus.yac.proto.Commit}
 */
proto.iroha.consensus.yac.proto.Commit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iroha.consensus.yac.proto.Commit;
  return proto.iroha.consensus.yac.proto.Commit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iroha.consensus.yac.proto.Commit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iroha.consensus.yac.proto.Commit}
 */
proto.iroha.consensus.yac.proto.Commit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iroha.consensus.yac.proto.Vote;
      reader.readMessage(value,proto.iroha.consensus.yac.proto.Vote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Commit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iroha.consensus.yac.proto.Commit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iroha.consensus.yac.proto.Commit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Commit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.iroha.consensus.yac.proto.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Vote votes = 1;
 * @return {!Array.<!proto.iroha.consensus.yac.proto.Vote>}
 */
proto.iroha.consensus.yac.proto.Commit.prototype.getVotesList = function() {
  return /** @type{!Array.<!proto.iroha.consensus.yac.proto.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iroha.consensus.yac.proto.Vote, 1));
};


/** @param {!Array.<!proto.iroha.consensus.yac.proto.Vote>} value */
proto.iroha.consensus.yac.proto.Commit.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.iroha.consensus.yac.proto.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iroha.consensus.yac.proto.Vote}
 */
proto.iroha.consensus.yac.proto.Commit.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.iroha.consensus.yac.proto.Vote, opt_index);
};


proto.iroha.consensus.yac.proto.Commit.prototype.clearVotesList = function() {
  this.setVotesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iroha.consensus.yac.proto.Reject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iroha.consensus.yac.proto.Reject.repeatedFields_, null);
};
goog.inherits(proto.iroha.consensus.yac.proto.Reject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iroha.consensus.yac.proto.Reject.displayName = 'proto.iroha.consensus.yac.proto.Reject';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iroha.consensus.yac.proto.Reject.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iroha.consensus.yac.proto.Reject.prototype.toObject = function(opt_includeInstance) {
  return proto.iroha.consensus.yac.proto.Reject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iroha.consensus.yac.proto.Reject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Reject.toObject = function(includeInstance, msg) {
  var f, obj = {
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.iroha.consensus.yac.proto.Vote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iroha.consensus.yac.proto.Reject}
 */
proto.iroha.consensus.yac.proto.Reject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iroha.consensus.yac.proto.Reject;
  return proto.iroha.consensus.yac.proto.Reject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iroha.consensus.yac.proto.Reject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iroha.consensus.yac.proto.Reject}
 */
proto.iroha.consensus.yac.proto.Reject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iroha.consensus.yac.proto.Vote;
      reader.readMessage(value,proto.iroha.consensus.yac.proto.Vote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iroha.consensus.yac.proto.Reject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iroha.consensus.yac.proto.Reject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iroha.consensus.yac.proto.Reject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iroha.consensus.yac.proto.Reject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.iroha.consensus.yac.proto.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Vote votes = 1;
 * @return {!Array.<!proto.iroha.consensus.yac.proto.Vote>}
 */
proto.iroha.consensus.yac.proto.Reject.prototype.getVotesList = function() {
  return /** @type{!Array.<!proto.iroha.consensus.yac.proto.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iroha.consensus.yac.proto.Vote, 1));
};


/** @param {!Array.<!proto.iroha.consensus.yac.proto.Vote>} value */
proto.iroha.consensus.yac.proto.Reject.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.iroha.consensus.yac.proto.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iroha.consensus.yac.proto.Vote}
 */
proto.iroha.consensus.yac.proto.Reject.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.iroha.consensus.yac.proto.Vote, opt_index);
};


proto.iroha.consensus.yac.proto.Reject.prototype.clearVotesList = function() {
  this.setVotesList([]);
};


goog.object.extend(exports, proto.iroha.consensus.yac.proto);
